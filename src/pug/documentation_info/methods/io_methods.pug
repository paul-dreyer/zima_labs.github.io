include ../../components/_method.pug

div()

+method(
  "get_instance_names",
  "get_instance_names(dataset_path: str, verbose: bool = True) -> Tuple[List[str], List[str]]",
  "Get a list of all instance names in a dataset directory. Returns validated and invalid instance name lists.",
  [
    "dataset_path (str): Absolute path to the dataset directory",
    "verbose (bool): If True, logs validation errors for instances that fail validation checks"
  ],
  [
    "Tuple[List[str], List[str]]: First list contains validated instances, second list contains invalid instances"
  ],
  "from zympy.zympy_io import get_instance_names\nvalidated, invalid = get_instance_names('/path/to/dataset', verbose=True)\nprint(validated)\nprint(invalid)"
)

+method(
  "load_dataset_meta",
  "load_dataset_meta(dataset_path: str) -> DataSetMeta",
  "Load and validate a DataSetMeta pydantic model from the dataset directory.",
  [
    "dataset_path (str): Root path to the dataset directory."
  ],
  [
    "DataSetMeta: Pydantic model containing validated metadata and pointers to InstanceMeta subclasses."
  ],
  "from zympy.zympy_io import load_dataset_meta\ndataset_meta = load_dataset_meta('/path/to/dataset')\nprint(dir(dataset_meta)) # print out all attributes and methods"
)

+method(
  "load_instance_meta",
  "load_instance_meta(instance_name: List[str], dataset_path: str) -> List[InstanceMeta]",
  "Load the metadata JSON for a specific instance or instances from a dataset.",
  [
    "instance_name (List[str]): The name(s) or ID(s) of the instance(s) to load.",
    "dataset_path (str): Root path to the dataset directory."
  ],
  [
    "List[InstanceMeta]: Validated metadata objects containing object descriptors, camera, lights, etc."
  ],
  "from zympy.zympy_io import load_instance_meta\ninstances = load_instance_meta(['abc123'], '/path/to/dataset')\nprint(dir(instances)) # print out all attributes and methods"
)

+method(
  "load_instance_image",
  "load_instance_image(instance_name: str, dataset_path: str) -> np.ndarray",
  "Load an image for a given instance from the dataset.",
  [
    "instance_name (str): The name or ID of the instance to load.",
    "dataset_path (str): Root path to the dataset directory."
  ],
  [
    "np.ndarray: Image array loaded from .png file."
  ],
  "from zympy.zympy_io import load_instance_image\nimage = load_instance_image('abc123', '/path/to/dataset')\nprint(image.shape)"
)

+method(
  "load_bounding_box_label",
  "load_bounding_box_label(instance_name: str, dataset_path: str, box_type: Literal['2D','3D']='2D') -> Dict",
  "Load the bounding box label for a specific instance from the dataset, supporting 2D or 3D boxes.",
  [
    "instance_name (str): The name or ID of the instance to load.",
    "dataset_path (str): Root path to the dataset directory.",
    "box_type (Literal['2D','3D']): Define the bounding box type to load ('2D' or '3D')."
  ],
  [
    "Dict: A dictionary mapping UUIDs to bounding box coordinates, e.g. `<uuid>: [[x0, y0], [x1, y1]]`."
  ],
  "from zympy.zympy_io import load_bounding_box_label\nbbox = load_bounding_box_label('abcd1234-efgh5678', '/path/to/dataset', box_type='2D')\nprint(bbox)"
)

+method(
  "load_contour_label",
  "load_contour_label(instance_name: str, dataset_path: str) -> Dict",
  "Load the contour label for a specific instance from the dataset.",
  [
    "instance_name (str): The name or ID of the instance to load.",
    "dataset_path (str): Root path to the dataset directory.",
  ],
  [
    "Dict: A dictionary mapping UUIDs to contour coordinates, e.g. `<uuid>: [[[x0, y0], [x1, y1], [x2, y2] ...], [[x0, y0], [x1, y1], [x2, y2] ...]]`."
  ],
  "from zympy.zympy_io import load_contour_label\nbbox = load_contour_label('abcd1234-efgh5678', '/path/to/dataset')\nprint(bbox)"
)

+method(
  "load_pose_label",
  "load_pose_label(instance_name: str, dataset_path: str) -> Dict",
  "Load the pose label for a specific instance from a dataset.",
  [
    "instance_name (str): The name or ID of the instance to load.",
    "dataset_path (str): Root path to the dataset directory.",
  ],
  [
    "Dict: A dictionary mapping UUIDs to pose data, e.g. `<uuid>: [[x, y, z], [w, x, y, z]]`."
  ],
  "from zympy.zympy_io import load_pose_label\npose_data = load_pose_label('abcd1234-efgh5678', '/path/to/dataset')\nprint(pose_data)"
)

+method(
  "load_segmentation_label",
  "load_segmentation_label(instance_name: str, dataset_path: str) -> Tuple[Dict, np.ndarray]",
  "Load the segmentation label for a specific instance from a dataset.",
  [
    "instance_name (str): The name or ID of the instance to load.",
    "dataset_path (str): Root path to the dataset directory."
  ],
  [
    "Dict: A dictionary mapping part UUID values to segmentation array values.",
    "np.ndarray: The segmentation array containing pixel data."
  ],
  "from zympy.zympy_io import load_segmentation_label\nseg_map, seg_array = load_segmentation_label('abc123', '/path/to/dataset')\nprint(seg_map)\nprint(seg_array.shape)"
)


